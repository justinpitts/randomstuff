package svnindex;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

import org.tmatesoft.svn.core.SVNException;
import org.tmatesoft.svn.core.SVNLogEntry;
import org.tmatesoft.svn.core.io.SVNRepository;

import sun.reflect.generics.reflectiveObjects.NotImplementedException;

public class LogIterable implements Iterable
{

	public Iterator<SVNLogEntry> iterator()
	{
		// TODO Auto-generated method stub
		return null;
	}
	class LogIterator implements Iterator<SVNLogEntry>
	{
		int batchSize = 100;
		SVNRepository repo;
		long startRevision = 0;		
		long endRevision = -1;
		ArrayList<SVNLogEntry> logs = null;
		//get all
		LogIterator(SVNRepository r) throws SVNException
		{
			repo = r;
			endRevision = r.getLatestRevision();		
		}

		//get last n
		LogIterator(SVNRepository r, int lastNLogs) throws SVNException
		{
			repo = r;
			endRevision = r.getLatestRevision();
			startRevision = endRevision - lastNLogs;			
		}
		
		//get from fromRevision to toRevision
		LogIterator(SVNRepository r, int fromRevision, int toRevision)
		{
			this.repo = r;
			startRevision = fromRevision;
			endRevision = toRevision;			
		}
				
		public boolean hasNext()
		{
			return (logs == null && startRevision >= endRevision;
		}

		public SVNLogEntry next()
		{
			if (hasNext())
			{
				if (logs == null)
				{
					logs = repository.log(new String[] { "" },null, startRevision, startRevision + batchSize, true, true);
					
					repo.log()
				}				
			} else
			return null;
		}

		public void remove()
		{
			throw new NotImplementedException();			
		}
	
	}

}
